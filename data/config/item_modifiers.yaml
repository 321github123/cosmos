---
<%= MetaConfigParser.load('param_item_modifiers.yaml').to_meta_config_yaml(0) %>
STATE:
  summary: Defines a key/value pair for the current item
  description: Key value pairs allow for user friendly strings. For example,
    you might define states for ON = 1 and OFF = 0. This allows the word ON to be
    used rather than the number 1 when sending the command parameter and allows
    for much greater clarity and less chance for user error.
  parameters:
    - name: Key
      required: true
      description: The string state name
      values: .*
    - name: Value
      required: true
      description: The numerical state value
      values: .*
    - name: Color
      required: false
      description: The color the state should be displayed as
      values: ['GREEN', 'YELLOW', 'RED']
READ_CONVERSION:
  summary: Applies a conversion when reading the current telemetry item
  description: Conversions are implemented in a custom Ruby file which should be
    located in the target's lib folder and required by the target's target.txt
    file (see REQUIRE). The class must require 'cosmos/conversions/conversion'
    and inherit from Conversion. It must implement the initialize method if it
    takes extra parameters and must always implement the call method. The conversion
    factor is applied to the value entered by the user before it is written into
    the binary command packet and sent.
  parameters:
    - name: Class File Name
      required: true
      description: The file name which contains the Ruby class. The file name must
        be named after the class such that the class is a CamelCase version of the
        underscored file name. For example, 'the_great_conversion.rb' should contain
        'class TheGreatConversion'.
      values: .*\.rb
    - name: Parameter
      required: false
      description: Additional parameter values for the conversion which are passed
        to the class constructor.
      values: .*
POLY_READ_CONVERSION:
  summary: Adds a polynomial conversion factor to the current command parameter
  description: The conversion factor is applied to the value entered by the user
    before it is written into the binary command packet and sent.
  parameters:
    - name: C0
      required: true
      description: Coefficient
      values: .*
    - name: Cx
      required: false
      description: Additional coefficient values for the conversion. Any order
        polynomial conversion may be used so the value of 'x' will vary with the
        order of the polynomial. Note that larger order polynomials take longer
        to process than shorter order polynomials, but are sometimes more accurate.
      values: .*
SEG_POLY_READ_CONVERSION:
  summary: Adds a segmented polynomial conversion factor to the current command parameter
  description: This conversion factor is applied to the value entered by the user
    before it is written into the binary command packet and sent.
  parameters:
    - name: Lower Bound
      required: true
      description: Defines the lower bound of the range of values that this segmented
        polynomial applies to. Is ignored for the segment with the smallest lower bound.
      values: .*
    - name: C0
      required: true
      description: Coefficient
      values: .*
    - name: Cx
      required: false
      description: Additional coefficient values for the conversion. Any order
        polynomial conversion may be used so the value of 'x' will vary with the
        order of the polynomial. Note that larger order polynomials take longer
        to process than shorter order polynomials, but are sometimes more accurate.
      values: .*
GENERIC_READ_CONVERSION_START:
  summary: Start a generic write conversion
  description: Adds a generic conversion function to the current command parameter.
    This conversion factor is applied to the value entered by the user before it
    is written into the binary command packet and sent. The conversion is specified
    as ruby code that receives two implied parameters. 'value' which is the raw
    value being written and 'packet' which is a reference to the command packet
    class (Note, referencing the packet as 'myself' is still supported for backwards
    compatibility). The last line of ruby code given should return the converted
    value. The GENERIC_READ_CONVERSION_END keyword specifies that all lines of
    ruby code for the conversion have been given.
  warning: Generic conversions are not a good long term solution. Consider creating
    a conversion class and using READ_CONVERSION instead. READ_CONVERSION is easier
    to debug and higher performance.
GENERIC_READ_CONVERSION_END:
  summary: Complete a generic write conversion
