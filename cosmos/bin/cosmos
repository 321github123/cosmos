#!/usr/bin/env ruby
# encoding: ascii-8bit

# Copyright 2021 Ball Aerospace & Technologies Corp.
# All Rights Reserved.
#
# This program is free software; you can modify and/or redistribute it
# under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation; version 3 with
# attribution addendums as found in the LICENSE.txt
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# This program may also be used under the terms of a commercial or
# enterprise edition license of COSMOS if purchased from the
# copyright holder

# This file will handle COSMOS tasks such as instantiating a new project

require 'cosmos'
require 'cosmos/utilities/s3'
require 'cosmos/models/scope_model'
require 'cosmos/models/plugin_model'
require 'cosmos/bridge/bridge'
require 'zip'
require 'zip/filesystem'
require 'fileutils'
require 'find'
require 'aws-sdk-s3'
require 'json'
require 'redis'
require 'erb'

$redis_url = ENV['COSMOS_REDIS_URL'] || (ENV['COSMOS_DEVEL'] ? 'redis://127.0.0.1:6379/0' : 'redis://cosmos-redis:6379/0')

# Prints the usage text for the cosmos executable
def print_usage
  puts "Usage:"
  puts "  cosmos help                          # Displays this information"
  puts "  cosmos rake                          # Runs rake in the local directory"
  puts "  cosmos load </PATH/FILENAME.gem>     # Loads a COSMOS plugin gem file"
  puts "  cosmos generate plugin <PLUGIN_NAME> # Generate a COSMOS plugin"
  puts "  cosmos bridge <config filename>      # Run COSMOS host bridge"
  puts "  cosmos bridgesetup <config filename> # Create a default config file"
  puts "  cosmos rubysloc                      # Counts Ruby SLOC recursively. Run with --help for more info."
  # puts "  cosmos xtce_converter                # Convert to and from the XTCE format. Run with --help for more info."
  puts "  cosmos cstol_converter               # Converts CSTOL files (.prc) to COSMOS. Run with --help for more info."
  puts ""
end

def generate(args)
  case args[0]
  when 'plugin'
    if args.length != 2
      abort("Usage: cosmos generate plugin <NAME>")
    end
    if args[1] =~ /\s/
      abort("Plugin names can not have spaces!")
    end

    plugin = args[1].downcase.gsub(/_+|-+/, '-')
    plugin_name = "cosmos-#{plugin}"
    if File.exist?(plugin_name)
      abort("Plugin #{plugin_name} already exists!")
    end
    FileUtils.mkdir(plugin_name)
    Dir.chdir(plugin_name)

    # Grab the plugin template (note this uses the Docker container path)
    template_dir = '/cosmos/templates/plugin-template'
    target_name = plugin.upcase.gsub('-', '_')
    target_lib_filename = "#{target_name.downcase}.rb"
    target_class = target_lib_filename.filename_to_class_name
    target_object = target_name.downcase
    b = binding

    Dir.glob("#{template_dir}/**/*").each do |file|
      base_name = file.sub("#{template_dir}/", '')
      # Rename the template TARGET to our actual target named after the plugin
      base_name.sub!("targets/TARGET", "targets/#{target_name}")
      if File.directory?(file)
        FileUtils.mkdir(base_name)
        next
      end
      base_name.sub!("target.rb", target_lib_filename)
      base_name.sub!("plugin.gemspec", "#{plugin_name}.gemspec")
      output = ERB.new(File.read(file)).result(b)
      File.open(base_name, 'w') do |file|
        file.write output
      end
    end

    puts "Plugin #{plugin_name} successfully generated!\n"
  else # Unknown generator
    abort("Unknown generator #{args[0]}")
  end
end

# A helper method to make the zip writing recursion work
def write_zip_entries(base_dir, entries, zip_path, io)
  io.add(zip_path, base_dir) # Add the directory whether it has entries or not
  entries.each do |e|
    zip_file_path = File.join(zip_path, e)
    disk_file_path = File.join(base_dir, e)
    if File.directory? disk_file_path
      recursively_deflate_directory(disk_file_path, io, zip_file_path)
    else
      put_into_archive(disk_file_path, io, zip_file_path)
    end
  end
end

def recursively_deflate_directory(disk_file_path, io, zip_file_path)
  io.add(zip_file_path, disk_file_path)
  write_zip_entries(disk_file_path, entries, zip_file_path, io)
end

def put_into_archive(disk_file_path, io, zip_file_path)
  io.get_output_stream(zip_file_path) do |f|
    data = nil
    File.open(disk_file_path, 'rb') { |file| data = file.read }
    f.write(data)
  end
end

def load_plugin(plugin_file_path, scope:)
  scope ||= 'DEFAULT'
  # Only create the scope if it doesn't already exist
  unless Cosmos::ScopeModel.names.include?(scope)
    begin
      scope_model = Cosmos::ScopeModel.new(name: scope, scope: scope)
      scope_model.create
      scope_model.deploy(".", {})
    rescue => err
      abort("Error creating scope: #{scope}: #{err.formatted}")
    end
  end

  begin
    # Try to find an existing plugin with this file to upgrade
    gem_filename = File.basename(plugin_file_path, ".gem")
    gem_filename = gem_filename.split('-')[0..-2].join('-')
    plugin_names = Cosmos::PluginModel.names(scope: scope)
    found = false
    plugin_names.each do |plugin_name|
      gem_name = plugin_name.split("__")[0]
      gem_name = File.basename(plugin_name, ".gem")
      gem_name = gem_name.split('-')[0..-2].join('-')
      if gem_filename == gem_name
        puts "Upgrading existing plugin: #{plugin_name} with #{plugin_file_path}"
        plugin_model = Cosmos::PluginModel.get_model(name: plugin_name, scope: scope)
        variables = plugin_model.variables
        plugin_model.destroy
        plugin_hash = Cosmos::PluginModel.install_phase1(plugin_file_path, variables, scope: scope)
        Cosmos::PluginModel.install_phase2(plugin_hash['name'], plugin_hash['variables'], scope: scope)
        found = true
      end
    end
    unless found
      puts "Loading new plugin: #{plugin_file_path}"
      plugin_hash = Cosmos::PluginModel.install_phase1(plugin_file_path, scope: scope)
      Cosmos::PluginModel.install_phase2(plugin_hash['name'], plugin_hash['variables'], scope: scope)
    end
  rescue => err
    abort("Error installing plugin: #{scope}: #{plugin_file_path}: #{err.formatted}")
  end
end

def get_redis_keys
  redis = Redis.new(url: $redis_url)
  puts "\n--- COSMOS Redis database keys ---"
  cursor = 0
  keys = []
  loop do
    cursor, result = redis.scan(cursor)
    keys.concat(result)
    cursor = cursor.to_i # cursor is returned as a string
    break if cursor == 0
  end
  keys.uniq!
  keys.sort!
  keys.select {|item| !item[/^tlm__/] }.each do |key|
    puts "#{key}\n  #{redis.hkeys(key)}"
  rescue Redis::CommandError
    begin
      # CommandError is raised if you try to hkeys on a stream
      puts "Stream: #{key}\n  #{redis.xinfo(:stream, key)}"
    rescue
      puts "Unknown key '#{key}'"
    end
  end
  puts "Packets Defs: #{keys.select {|item| item[/^tlm__/]}}"
end

if not ARGV[0].nil? # argument(s) given

  # Handle each task
  case ARGV[0].downcase

  when 'rake'
    puts `rake #{ARGV[1..-1].join(' ')}`

  when 'load'
    load_plugin(ARGV[1], scope: ARGV[2])

  # TODO: This will require more work in COSMOS 5 ... would be nice to spawn
  # in docker container and then map out port to access locally
  # when 'docs'
  #   thread = Thread.new do
  #     system('yard server --gems')
  #   end
  #   sleep 3
  #   Cosmos.open_in_web_browser('http://127.0.0.1:8808/docs/cosmos/frames')
  #   thread.join

  when 'generate'
    generate(ARGV[1..-1])

  when 'rubysloc'
    puts `ruby /cosmos/bin/rubysloc #{ARGV[1..-1].join(' ')}`

  when 'cstol_converter'
    puts `ruby /cosmos/bin/cstol_converter #{ARGV[1..-1].join(' ')}`

  # TODO: This still needs work in COSMOS 5
  # when 'xtce_converter'
  #   puts `ruby /cosmos/bin/xtce_converter #{ARGV[1..-1].join(' ')}`

  when 'bridge'
    filename = ARGV[1]
    filename = 'bridge.txt' unless filename
    bridge = Cosmos::Bridge.new(filename)
    begin
      while true
        sleep(1)
      end
    rescue Interrupt
      exit(0)
    end

  when 'bridgesetup'
    filename = ARGV[1]
    filename = 'bridge.txt' unless filename
    unless File.exist?(filename)
      Cosmos::BridgeConfig.generate_default(filename)
    end

  when 'help'
    print_usage()

  when 'redis'
    case (ARGV[1])
    when 'keys'
      get_redis_keys()
    when 'hget'
      redis = Redis.new(url: $redis_url)
      puts JSON.parse(redis.hget(ARGV[2], ARGV[3]))
    else
      puts "Unknown redis task: #{ARGV[1]}\n"
      puts "Valid redis tasks: keys, hget"
    end

  else # Unknown task
    print_usage()
    abort("Unknown task: #{ARGV[0]}")
  end

else # No arguments given
  print_usage()
end
